// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.API.Data;

namespace MyApp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190407084922_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyApp.API.Models.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<string>("District");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<int?>("PinCode");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("MyApp.API.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "India" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MyApp.API.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Districts");

                    b.HasData(
                        new { Id = 515, Name = "Ariyalur", StateId = 31 },
                        new { Id = 516, Name = "Chennai", StateId = 31 },
                        new { Id = 517, Name = "Coimbatore", StateId = 31 },
                        new { Id = 518, Name = "Cuddalore", StateId = 31 },
                        new { Id = 519, Name = "Dharmapuri", StateId = 31 },
                        new { Id = 520, Name = "Dindigul", StateId = 31 },
                        new { Id = 521, Name = "Erode", StateId = 31 },
                        new { Id = 522, Name = "Kanchipuram", StateId = 31 },
                        new { Id = 523, Name = "Kanyakumari", StateId = 31 },
                        new { Id = 524, Name = "Karur", StateId = 31 },
                        new { Id = 525, Name = "Krishnagiri", StateId = 31 },
                        new { Id = 526, Name = "Madurai", StateId = 31 },
                        new { Id = 527, Name = "Nagapattinam", StateId = 31 },
                        new { Id = 528, Name = "Namakkal", StateId = 31 },
                        new { Id = 529, Name = "Nilgiris", StateId = 31 },
                        new { Id = 530, Name = "Perambalur", StateId = 31 },
                        new { Id = 531, Name = "Pudukkottai", StateId = 31 },
                        new { Id = 532, Name = "Ramanathapuram", StateId = 31 },
                        new { Id = 533, Name = "Salem", StateId = 31 },
                        new { Id = 534, Name = "Sivagangai", StateId = 31 },
                        new { Id = 535, Name = "Thanjavur", StateId = 31 },
                        new { Id = 536, Name = "Theni", StateId = 31 },
                        new { Id = 537, Name = "Tuticorin", StateId = 31 },
                        new { Id = 538, Name = "Tiruchirapalli", StateId = 31 },
                        new { Id = 539, Name = "Thirunelveli", StateId = 31 },
                        new { Id = 540, Name = "Tiruppur", StateId = 31 },
                        new { Id = 541, Name = "Thiruvallur", StateId = 31 },
                        new { Id = 542, Name = "Thiruvannamalai", StateId = 31 },
                        new { Id = 543, Name = "Thiruvarur", StateId = 31 },
                        new { Id = 544, Name = "Vellore", StateId = 31 },
                        new { Id = 545, Name = "Viluppuram", StateId = 31 },
                        new { Id = 546, Name = "Virudhunagar", StateId = 31 }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("DocumentDesc");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new { Id = 1, Code = "SSLC Mark", DocumentDesc = "10th Mark Sheet" },
                        new { Id = 2, Code = "12th Mark", DocumentDesc = "12th Mark Sheet" },
                        new { Id = 3, Code = "Ration Card", DocumentDesc = "Family Member Details" },
                        new { Id = 4, Code = "Birth Certificate", DocumentDesc = "Birth Certificate" },
                        new { Id = 5, Code = "Aadhaar", DocumentDesc = "Aadhaar Details" },
                        new { Id = 6, Code = "UG Degree", DocumentDesc = "Under Grduate Degree Certificate" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.Like", b =>
                {
                    b.Property<int>("LikerId");

                    b.Property<int>("LikeeId");

                    b.HasKey("LikerId", "LikeeId");

                    b.HasIndex("LikeeId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MyApp.API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateRead");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("MessageSent");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<int>("RecipientId");

                    b.Property<bool>("SenderDeleted");

                    b.Property<int>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MyApp.API.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("PaymentDesc");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new { Id = 1, Code = "Cash", PaymentDesc = "Cash" },
                        new { Id = 2, Code = "Cheque", PaymentDesc = "Cheque" },
                        new { Id = 3, Code = "DD", PaymentDesc = "Demand Draft" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MyApp.API.Models.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnName("RelationType")
                        .HasMaxLength(50);

                    b.Property<string>("RelationTypeDesc")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RelationTypes");

                    b.HasData(
                        new { Id = 1, Relation = "Father", RelationTypeDesc = "Parent" },
                        new { Id = 2, Relation = "Mother", RelationTypeDesc = "Parent" },
                        new { Id = 3, Relation = "GrandParent", RelationTypeDesc = "Grand Father , Grand Mother" },
                        new { Id = 4, Relation = "Guardian", RelationTypeDesc = "Uncle, Aunt" },
                        new { Id = 5, Relation = "Sister", RelationTypeDesc = "Sibling" },
                        new { Id = 6, Relation = "Brother", RelationTypeDesc = "Sibling" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyApp.API.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SemesterDesc")
                        .HasMaxLength(256);

                    b.Property<string>("SemesterEndMonth")
                        .HasMaxLength(10);

                    b.Property<string>("SemesterStartMonth")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Semesters");

                    b.HasData(
                        new { Id = 1, Code = "Sem 1", SemesterEndMonth = "Nov", SemesterStartMonth = "Jun" },
                        new { Id = 2, Code = "Sem 2", SemesterEndMonth = "Apr", SemesterStartMonth = "Dec" },
                        new { Id = 3, Code = "Sem 3", SemesterEndMonth = "Nov", SemesterStartMonth = "Jun" },
                        new { Id = 4, Code = "Sem 4", SemesterEndMonth = "Apr", SemesterStartMonth = "Dec" },
                        new { Id = 5, Code = "Sem 5", SemesterEndMonth = "Nov", SemesterStartMonth = "Jun" },
                        new { Id = 6, Code = "Sem 6", SemesterEndMonth = "Apr", SemesterStartMonth = "Dec" },
                        new { Id = 7, Code = "Sem 7", SemesterEndMonth = "Nov", SemesterStartMonth = "Jun" },
                        new { Id = 8, Code = "Sem 8", SemesterEndMonth = "Apr", SemesterStartMonth = "Dec" },
                        new { Id = 9, Code = "Year 1", SemesterEndMonth = "Apr", SemesterStartMonth = "Jun" },
                        new { Id = 10, Code = "Year 2", SemesterEndMonth = "Apr", SemesterStartMonth = "Jun" },
                        new { Id = 11, Code = "Year 3", SemesterEndMonth = "Apr", SemesterStartMonth = "Jun" },
                        new { Id = 12, Code = "Year 4", SemesterEndMonth = "Apr", SemesterStartMonth = "Jun" },
                        new { Id = 13, Code = "Year 5", SemesterEndMonth = "Apr", SemesterStartMonth = "Jun" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new { Id = 1, CountryId = 1, Name = "Andaman and Nicobar Island" },
                        new { Id = 2, CountryId = 1, Name = "Andhra Pradesh" },
                        new { Id = 3, CountryId = 1, Name = "Arunachal Pradesh" },
                        new { Id = 4, CountryId = 1, Name = "Assam" },
                        new { Id = 5, CountryId = 1, Name = "Bihar" },
                        new { Id = 6, CountryId = 1, Name = "Chandigarh" },
                        new { Id = 7, CountryId = 1, Name = "Chhattisgarh" },
                        new { Id = 8, CountryId = 1, Name = "Dadra and Nagar Haveli" },
                        new { Id = 9, CountryId = 1, Name = "Daman and Diu" },
                        new { Id = 10, CountryId = 1, Name = "Delhi" },
                        new { Id = 11, CountryId = 1, Name = "Goa" },
                        new { Id = 12, CountryId = 1, Name = "Gujarat" },
                        new { Id = 13, CountryId = 1, Name = "Haryana" },
                        new { Id = 14, CountryId = 1, Name = "Himachal Pradesh" },
                        new { Id = 15, CountryId = 1, Name = "Jammu and Kashmir" },
                        new { Id = 16, CountryId = 1, Name = "Jharkhand" },
                        new { Id = 17, CountryId = 1, Name = "Karnataka" },
                        new { Id = 18, CountryId = 1, Name = "Kerala" },
                        new { Id = 19, CountryId = 1, Name = "Lakshadweep" },
                        new { Id = 20, CountryId = 1, Name = "Madhya Pradesh" },
                        new { Id = 21, CountryId = 1, Name = "Maharashtra" },
                        new { Id = 22, CountryId = 1, Name = "Manipur" },
                        new { Id = 23, CountryId = 1, Name = "Meghalaya" },
                        new { Id = 24, CountryId = 1, Name = "Mizoram" },
                        new { Id = 25, CountryId = 1, Name = "Nagaland" },
                        new { Id = 26, CountryId = 1, Name = "Odisha" },
                        new { Id = 27, CountryId = 1, Name = "Puducherry" },
                        new { Id = 28, CountryId = 1, Name = "Punjab" },
                        new { Id = 29, CountryId = 1, Name = "Rajasthan" },
                        new { Id = 30, CountryId = 1, Name = "Sikkim" },
                        new { Id = 31, CountryId = 1, Name = "Tamil Nadu" },
                        new { Id = 32, CountryId = 1, Name = "Telangana" },
                        new { Id = 33, CountryId = 1, Name = "Tripura" },
                        new { Id = 34, CountryId = 1, Name = "Uttar Pradesh" },
                        new { Id = 35, CountryId = 1, Name = "Uttarakhand" },
                        new { Id = 36, CountryId = 1, Name = "West Bengal" }
                    );
                });

            modelBuilder.Entity("MyApp.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(80);

                    b.Property<string>("Caste")
                        .HasMaxLength(80);

                    b.Property<string>("Cfssn")
                        .HasColumnName("CFSSN")
                        .HasMaxLength(50);

                    b.Property<string>("CountryOfBirth")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedOnUtc");

                    b.Property<string>("CurrentAddress");

                    b.Property<string>("CurrentCity")
                        .HasMaxLength(255);

                    b.Property<int?>("CurrentCityId");

                    b.Property<string>("CurrentDistrict")
                        .HasMaxLength(255);

                    b.Property<int?>("CurrentDistrictId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<bool?>("Disability");

                    b.Property<string>("DisabilityType")
                        .HasMaxLength(100);

                    b.Property<string>("EmailId")
                        .HasMaxLength(256);

                    b.Property<string>("FatherName")
                        .HasMaxLength(80);

                    b.Property<int?>("FirstAdmissionYear");

                    b.Property<string>("FirstName")
                        .HasMaxLength(80);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<bool?>("IsAllSemSupport")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("IsCollege")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(80);

                    b.Property<int?>("Marks");

                    b.Property<string>("MobileNumber1")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber2")
                        .HasMaxLength(50);

                    b.Property<string>("MotherTongue")
                        .HasMaxLength(80);

                    b.Property<string>("Nationality")
                        .HasMaxLength(80);

                    b.Property<string>("PermanentAddress");

                    b.Property<string>("PermanentCity")
                        .HasMaxLength(255);

                    b.Property<int?>("PermanentCityId");

                    b.Property<string>("PermanentDistrict")
                        .HasMaxLength(255);

                    b.Property<int?>("PermanentDistrictId");

                    b.Property<string>("PhoneWithStdCode")
                        .HasMaxLength(255);

                    b.Property<int?>("PinCode");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(100);

                    b.Property<int?>("PlaceOfBirthPinNo");

                    b.Property<string>("PrevCfssn")
                        .HasColumnName("PrevCFSSN")
                        .HasMaxLength(50);

                    b.Property<byte[]>("ProfilePicBinary");

                    b.Property<string>("Religion")
                        .HasMaxLength(80);

                    b.Property<string>("StateOfBirth")
                        .HasMaxLength(100);

                    b.Property<bool?>("StudentStatus");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCityId");

                    b.HasIndex("CurrentDistrictId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentAcademic", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AcademicGroup")
                        .HasMaxLength(80);

                    b.Property<int?>("Marks");

                    b.Property<string>("MediumOfInstruction")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("SchoolAddress");

                    b.Property<string>("SchoolBoardType")
                        .HasMaxLength(50);

                    b.Property<string>("SchoolCity")
                        .HasMaxLength(80);

                    b.Property<int?>("SchoolCityId");

                    b.Property<string>("SchoolDistrict")
                        .HasMaxLength(80);

                    b.Property<int?>("SchoolDistrictId");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(256);

                    b.Property<string>("Standard")
                        .HasMaxLength(10);

                    b.Property<int?>("StudentId");

                    b.Property<int?>("YearOfPassing");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCityId");

                    b.HasIndex("SchoolDistrictId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAcademics");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("DocumentBinary");

                    b.Property<string>("DocumentDesc");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("StudentDocuments");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollegeId");

                    b.Property<int>("CourseId");

                    b.Property<string>("EnrollmentDesc");

                    b.Property<int?>("EnrollmentYear");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankDetails")
                        .HasMaxLength(256);

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DateOfPayment");

                    b.Property<decimal>("FeesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FeesDesc");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int>("StudentId");

                    b.Property<int?>("StudentSemId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFees");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Organisation")
                        .HasMaxLength(256);

                    b.Property<string>("PlacementDesc");

                    b.Property<string>("PlacementStartDate")
                        .HasMaxLength(256);

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPlacements");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentRelation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("AnnualIncome")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Occupation")
                        .HasMaxLength(50);

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(50);

                    b.Property<string>("PermanentCity")
                        .HasMaxLength(50);

                    b.Property<int?>("PermanentCityId");

                    b.Property<string>("PermanentDistrict")
                        .HasMaxLength(50);

                    b.Property<int?>("PermanentDistrictId");

                    b.Property<string>("PermanentPincode")
                        .HasMaxLength(50);

                    b.Property<string>("PermanentState")
                        .HasMaxLength(50);

                    b.Property<int?>("PermanentStateId");

                    b.Property<string>("PhoneWithStdcode")
                        .HasColumnName("PhoneWithSTDCode")
                        .HasMaxLength(50);

                    b.Property<string>("RelationName")
                        .HasMaxLength(50);

                    b.Property<int?>("RelationTypeId");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("PermanentCityId");

                    b.HasIndex("PermanentDistrictId");

                    b.HasIndex("PermanentStateId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRelations");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("SemesterGrade")
                        .HasColumnType("numeric(10, 0)");

                    b.Property<int>("SemesterId");

                    b.Property<int>("StudentEnrollId");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentEnrollId");

                    b.ToTable("StudentSemesters");
                });

            modelBuilder.Entity("MyApp.API.Models.SubDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("SubDistricts");
                });

            modelBuilder.Entity("MyApp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Gender");

                    b.Property<string>("Interests");

                    b.Property<string>("Introduction");

                    b.Property<string>("KnownAs");

                    b.Property<DateTime>("LastActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("LookingFor");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyApp.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MyApp.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MyApp.API.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.API.Models.College", b =>
                {
                    b.HasOne("MyApp.API.Models.District", "CollegeDistrictNavigation")
                        .WithMany("Colleges")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Colleges_Districts");
                });

            modelBuilder.Entity("MyApp.API.Models.District", b =>
                {
                    b.HasOne("MyApp.API.Models.State", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Districts_States");
                });

            modelBuilder.Entity("MyApp.API.Models.Like", b =>
                {
                    b.HasOne("MyApp.API.Models.User", "Likee")
                        .WithMany("Likers")
                        .HasForeignKey("LikeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyApp.API.Models.User", "Liker")
                        .WithMany("Likees")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyApp.API.Models.Message", b =>
                {
                    b.HasOne("MyApp.API.Models.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyApp.API.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyApp.API.Models.Photo", b =>
                {
                    b.HasOne("MyApp.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApp.API.Models.State", b =>
                {
                    b.HasOne("MyApp.API.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_States_Countries");
                });

            modelBuilder.Entity("MyApp.API.Models.Student", b =>
                {
                    b.HasOne("MyApp.API.Models.SubDistrict", "CurrentCityNavigation")
                        .WithMany("Students")
                        .HasForeignKey("CurrentCityId")
                        .HasConstraintName("FK_Students_SubDistricts");

                    b.HasOne("MyApp.API.Models.District", "CurrentDistrictNavigation")
                        .WithMany("Students")
                        .HasForeignKey("CurrentDistrictId")
                        .HasConstraintName("FK_Students_Districts");

                    b.HasOne("MyApp.API.Models.Student", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("MyApp.API.Models.Student", "Id")
                        .HasConstraintName("FK_Students_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentAcademic", b =>
                {
                    b.HasOne("MyApp.API.Models.StudentAcademic", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("MyApp.API.Models.StudentAcademic", "Id")
                        .HasConstraintName("FK_StudentAcademics_StudentAcademics");

                    b.HasOne("MyApp.API.Models.SubDistrict", "SchoolCityNavigation")
                        .WithMany("StudentAcademics")
                        .HasForeignKey("SchoolCityId")
                        .HasConstraintName("FK_StudentAcademics_SubDistricts");

                    b.HasOne("MyApp.API.Models.District", "SchoolDistrictNavigation")
                        .WithMany("StudentAcademics")
                        .HasForeignKey("SchoolDistrictId")
                        .HasConstraintName("FK_StudentAcademics_Districts");

                    b.HasOne("MyApp.API.Models.Student", "Student")
                        .WithMany("StudentAcademics")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentAcademics_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentDocument", b =>
                {
                    b.HasOne("MyApp.API.Models.Student", "DocumentType")
                        .WithMany("StudentDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_StudentDocuments_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentEnrollment", b =>
                {
                    b.HasOne("MyApp.API.Models.College", "College")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("CollegeId")
                        .HasConstraintName("FK_StudentEnrollments_Colleges");

                    b.HasOne("MyApp.API.Models.Course", "Course")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentEnrollments_Courses");

                    b.HasOne("MyApp.API.Models.Student", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentEnrollments_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentFee", b =>
                {
                    b.HasOne("MyApp.API.Models.PaymentType", "PaymentType")
                        .WithMany("StudentFees")
                        .HasForeignKey("PaymentTypeId")
                        .HasConstraintName("FK_StudentFees_PaymentTypes");

                    b.HasOne("MyApp.API.Models.Student", "Student")
                        .WithMany("StudentFees")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentFees_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentPlacement", b =>
                {
                    b.HasOne("MyApp.API.Models.Student", "Student")
                        .WithMany("StudentPlacements")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentPlacements_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentRelation", b =>
                {
                    b.HasOne("MyApp.API.Models.StudentRelation", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("MyApp.API.Models.StudentRelation", "Id")
                        .HasConstraintName("FK_StudentRelations_StudentRelations");

                    b.HasOne("MyApp.API.Models.SubDistrict", "PermanentCityNavigation")
                        .WithMany("StudentRelations")
                        .HasForeignKey("PermanentCityId")
                        .HasConstraintName("FK_StudentRelations_SubDistricts");

                    b.HasOne("MyApp.API.Models.District", "PermanentDistrictNavigation")
                        .WithMany("StudentRelations")
                        .HasForeignKey("PermanentDistrictId")
                        .HasConstraintName("FK_StudentRelations_Districts");

                    b.HasOne("MyApp.API.Models.State", "PermanentStateNavigation")
                        .WithMany("StudentRelations")
                        .HasForeignKey("PermanentStateId")
                        .HasConstraintName("FK_StudentRelations_States");

                    b.HasOne("MyApp.API.Models.RelationType", "RelationType")
                        .WithMany("StudentRelations")
                        .HasForeignKey("RelationTypeId")
                        .HasConstraintName("FK_StudentRelations_RelationTypes");

                    b.HasOne("MyApp.API.Models.Student", "Student")
                        .WithMany("StudentRelations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentRelations_Students");
                });

            modelBuilder.Entity("MyApp.API.Models.StudentSemester", b =>
                {
                    b.HasOne("MyApp.API.Models.Semester", "Semester")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_StudentSemesters_Semesters");

                    b.HasOne("MyApp.API.Models.StudentEnrollment", "StudentEnroll")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("StudentEnrollId")
                        .HasConstraintName("FK_StudentSemesters_StudentEnrollments");
                });

            modelBuilder.Entity("MyApp.API.Models.SubDistrict", b =>
                {
                    b.HasOne("MyApp.API.Models.District", "District")
                        .WithMany("SubDistricts")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_SubDistricts_Districts");
                });

            modelBuilder.Entity("MyApp.API.Models.UserRole", b =>
                {
                    b.HasOne("MyApp.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApp.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
